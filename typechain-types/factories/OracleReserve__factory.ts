/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { OracleReserve, OracleReserveInterface } from "../OracleReserve";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "oracle_",
        type: "address",
      },
      {
        internalType: "address",
        name: "pool_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "price_",
        type: "uint256",
      },
    ],
    name: "amountMax",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "price_",
        type: "uint256",
      },
    ],
    name: "amountMin",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token_",
        type: "address",
      },
    ],
    name: "isSupported",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "oracle",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pool",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceDecimals",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    name: "priceMax",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    name: "priceMin",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161032138038061032183398101604081905261002f9161007c565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b610263806100be6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063561c2ed81161005b578063561c2ed8146100d35780637dc0d1d01461010d57806395f881c9146100d3578063b1d5e1b9146100d357600080fd5b806305300b281461008d57806316f0115b146100a8578063468cde72146100d35780634f129c53146100e9575b600080fd5b610095610120565b6040519081526020015b60405180910390f35b6001546100bb906001600160a01b031681565b6040516001600160a01b03909116815260200161009f565b6100956100e13660046101c8565b600092915050565b6100fd6100f73660046101f2565b50600090565b604051901515815260200161009f565b6000546100bb906001600160a01b031681565b60008060009054906101000a90046001600160a01b03166001600160a01b03166305300b286040518163ffffffff1660e01b815260040160206040518083038186803b15801561016f57600080fd5b505afa158015610183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a79190610214565b905090565b80356001600160a01b03811681146101c357600080fd5b919050565b600080604083850312156101db57600080fd5b6101e4836101ac565b946020939093013593505050565b60006020828403121561020457600080fd5b61020d826101ac565b9392505050565b60006020828403121561022657600080fd5b505191905056fea2646970667358221220ebd129d88886e07e2a030086971b89aec8956e537539cb156ff8dfd662b2b50264736f6c63430008090033";

type OracleReserveConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OracleReserveConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OracleReserve__factory extends ContractFactory {
  constructor(...args: OracleReserveConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "OracleReserve";
  }

  deploy(
    oracle_: string,
    pool_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<OracleReserve> {
    return super.deploy(
      oracle_,
      pool_,
      overrides || {}
    ) as Promise<OracleReserve>;
  }
  getDeployTransaction(
    oracle_: string,
    pool_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(oracle_, pool_, overrides || {});
  }
  attach(address: string): OracleReserve {
    return super.attach(address) as OracleReserve;
  }
  connect(signer: Signer): OracleReserve__factory {
    return super.connect(signer) as OracleReserve__factory;
  }
  static readonly contractName: "OracleReserve";
  public readonly contractName: "OracleReserve";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OracleReserveInterface {
    return new utils.Interface(_abi) as OracleReserveInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OracleReserve {
    return new Contract(address, _abi, signerOrProvider) as OracleReserve;
  }
}
