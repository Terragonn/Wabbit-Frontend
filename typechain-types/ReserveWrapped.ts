/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ReserveWrappedInterface extends utils.Interface {
  contractName: "ReserveWrapped";
  functions: {
    "accumulatedWrappedTokens(address)": FunctionFragment;
    "addStakeToken(address[])": FunctionFragment;
    "allowedMintedTokens(address)": FunctionFragment;
    "approveStakeToken(address[],bool[])": FunctionFragment;
    "burnWrappedTokens(uint256)": FunctionFragment;
    "initializeReserveCore(address,address,address,address)": FunctionFragment;
    "initializeReserveWrapped(uint256)": FunctionFragment;
    "isApprovedStakeToken(address)": FunctionFragment;
    "isStakeToken(address)": FunctionFragment;
    "minStakeTime()": FunctionFragment;
    "mintWrappedTokens(uint256)": FunctionFragment;
    "oracle()": FunctionFragment;
    "outstandingWrappedTokens(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reserveToken()": FunctionFragment;
    "reserveTokenWrapped()": FunctionFragment;
    "reserveTreasury()": FunctionFragment;
    "setMinStakeTime(uint256)": FunctionFragment;
    "setOracle(address)": FunctionFragment;
    "setReserveToken(address)": FunctionFragment;
    "setReserveTokenWrapped(address)": FunctionFragment;
    "setReserveTreasury(address)": FunctionFragment;
    "stakeTime(address,address)": FunctionFragment;
    "staked(address,address)": FunctionFragment;
    "totalStaked(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unclaimedReserveTokens(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accumulatedWrappedTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addStakeToken",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedMintedTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approveStakeToken",
    values: [string[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burnWrappedTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeReserveCore",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeReserveWrapped",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedStakeToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isStakeToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "minStakeTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintWrappedTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "outstandingWrappedTokens",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveTokenWrapped",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMinStakeTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOracle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setReserveToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveTokenWrapped",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveTreasury",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeTime",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "staked",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "totalStaked", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unclaimedReserveTokens",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "accumulatedWrappedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addStakeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedMintedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveStakeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnWrappedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeReserveCore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeReserveWrapped",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedStakeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isStakeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minStakeTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWrappedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "outstandingWrappedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveTokenWrapped",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinStakeTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReserveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveTokenWrapped",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakeTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "staked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unclaimedReserveTokens",
    data: BytesLike
  ): Result;

  events: {
    "AddStakeToken(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddStakeToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type AddStakeTokenEvent = TypedEvent<[string], { token: string }>;

export type AddStakeTokenEventFilter = TypedEventFilter<AddStakeTokenEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ReserveWrapped extends BaseContract {
  contractName: "ReserveWrapped";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ReserveWrappedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accumulatedWrappedTokens(
      account_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addStakeToken(
      token_: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowedMintedTokens(
      account_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approveStakeToken(
      token_: string[],
      approved_: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnWrappedTokens(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeReserveCore(
      oracle_: string,
      reserveTreasury_: string,
      reserveToken_: string,
      reserveTokenWrapped_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeReserveWrapped(
      minStakeTime_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedStakeToken(
      token_: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isStakeToken(token_: string, overrides?: CallOverrides): Promise<[boolean]>;

    minStakeTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintWrappedTokens(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    outstandingWrappedTokens(
      account_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserveToken(overrides?: CallOverrides): Promise<[string]>;

    reserveTokenWrapped(overrides?: CallOverrides): Promise<[string]>;

    reserveTreasury(overrides?: CallOverrides): Promise<[string]>;

    setMinStakeTime(
      minStakeTime_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracle(
      oracle_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReserveToken(
      reserveToken_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReserveTokenWrapped(
      reserveTokenWrapped_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReserveTreasury(
      reserveTreasury_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeTime(
      token_: string,
      account_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    staked(
      token_: string,
      account_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalStaked(
      token_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unclaimedReserveTokens(
      account_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  accumulatedWrappedTokens(
    account_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addStakeToken(
    token_: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowedMintedTokens(
    account_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approveStakeToken(
    token_: string[],
    approved_: boolean[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnWrappedTokens(
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeReserveCore(
    oracle_: string,
    reserveTreasury_: string,
    reserveToken_: string,
    reserveTokenWrapped_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeReserveWrapped(
    minStakeTime_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedStakeToken(
    token_: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isStakeToken(token_: string, overrides?: CallOverrides): Promise<boolean>;

  minStakeTime(overrides?: CallOverrides): Promise<BigNumber>;

  mintWrappedTokens(
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  oracle(overrides?: CallOverrides): Promise<string>;

  outstandingWrappedTokens(
    account_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserveToken(overrides?: CallOverrides): Promise<string>;

  reserveTokenWrapped(overrides?: CallOverrides): Promise<string>;

  reserveTreasury(overrides?: CallOverrides): Promise<string>;

  setMinStakeTime(
    minStakeTime_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracle(
    oracle_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReserveToken(
    reserveToken_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReserveTokenWrapped(
    reserveTokenWrapped_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReserveTreasury(
    reserveTreasury_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeTime(
    token_: string,
    account_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  staked(
    token_: string,
    account_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalStaked(token_: string, overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unclaimedReserveTokens(
    account_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    accumulatedWrappedTokens(
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addStakeToken(token_: string[], overrides?: CallOverrides): Promise<void>;

    allowedMintedTokens(
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approveStakeToken(
      token_: string[],
      approved_: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    burnWrappedTokens(
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeReserveCore(
      oracle_: string,
      reserveTreasury_: string,
      reserveToken_: string,
      reserveTokenWrapped_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeReserveWrapped(
      minStakeTime_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedStakeToken(
      token_: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isStakeToken(token_: string, overrides?: CallOverrides): Promise<boolean>;

    minStakeTime(overrides?: CallOverrides): Promise<BigNumber>;

    mintWrappedTokens(
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    oracle(overrides?: CallOverrides): Promise<string>;

    outstandingWrappedTokens(
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reserveToken(overrides?: CallOverrides): Promise<string>;

    reserveTokenWrapped(overrides?: CallOverrides): Promise<string>;

    reserveTreasury(overrides?: CallOverrides): Promise<string>;

    setMinStakeTime(
      minStakeTime_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracle(oracle_: string, overrides?: CallOverrides): Promise<void>;

    setReserveToken(
      reserveToken_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setReserveTokenWrapped(
      reserveTokenWrapped_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setReserveTreasury(
      reserveTreasury_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeTime(
      token_: string,
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    staked(
      token_: string,
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStaked(token_: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unclaimedReserveTokens(
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AddStakeToken(address)"(token?: null): AddStakeTokenEventFilter;
    AddStakeToken(token?: null): AddStakeTokenEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    accumulatedWrappedTokens(
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addStakeToken(
      token_: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowedMintedTokens(
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approveStakeToken(
      token_: string[],
      approved_: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnWrappedTokens(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeReserveCore(
      oracle_: string,
      reserveTreasury_: string,
      reserveToken_: string,
      reserveTokenWrapped_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeReserveWrapped(
      minStakeTime_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedStakeToken(
      token_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isStakeToken(token_: string, overrides?: CallOverrides): Promise<BigNumber>;

    minStakeTime(overrides?: CallOverrides): Promise<BigNumber>;

    mintWrappedTokens(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    outstandingWrappedTokens(
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserveToken(overrides?: CallOverrides): Promise<BigNumber>;

    reserveTokenWrapped(overrides?: CallOverrides): Promise<BigNumber>;

    reserveTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    setMinStakeTime(
      minStakeTime_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracle(
      oracle_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReserveToken(
      reserveToken_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReserveTokenWrapped(
      reserveTokenWrapped_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReserveTreasury(
      reserveTreasury_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeTime(
      token_: string,
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    staked(
      token_: string,
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStaked(token_: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unclaimedReserveTokens(
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accumulatedWrappedTokens(
      account_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addStakeToken(
      token_: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowedMintedTokens(
      account_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approveStakeToken(
      token_: string[],
      approved_: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnWrappedTokens(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeReserveCore(
      oracle_: string,
      reserveTreasury_: string,
      reserveToken_: string,
      reserveTokenWrapped_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeReserveWrapped(
      minStakeTime_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedStakeToken(
      token_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isStakeToken(
      token_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minStakeTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintWrappedTokens(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    outstandingWrappedTokens(
      account_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserveToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserveTokenWrapped(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserveTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMinStakeTime(
      minStakeTime_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracle(
      oracle_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReserveToken(
      reserveToken_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReserveTokenWrapped(
      reserveTokenWrapped_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReserveTreasury(
      reserveTreasury_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeTime(
      token_: string,
      account_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    staked(
      token_: string,
      account_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStaked(
      token_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unclaimedReserveTokens(
      account_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
