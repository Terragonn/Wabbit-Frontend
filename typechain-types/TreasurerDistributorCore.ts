/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface TreasurerDistributorCoreInterface extends utils.Interface {
  contractName: "TreasurerDistributorCore";
  functions: {
    "initializeReserveCore(address,address,address,address)": FunctionFragment;
    "initializeReserveDistributorCore(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "maxHistoricalTreasuryValue()": FunctionFragment;
    "oracle()": FunctionFragment;
    "owner()": FunctionFragment;
    "rebaseCooldown()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reserveToken()": FunctionFragment;
    "reserveTokenBackingDecayPercent()": FunctionFragment;
    "reserveTokenDistributionPercent()": FunctionFragment;
    "resetTotalSupply()": FunctionFragment;
    "setOracle(address)": FunctionFragment;
    "setRebaseCooldown(uint256)": FunctionFragment;
    "setReserveToken(address)": FunctionFragment;
    "setReserveTokenBackingDecayPercent(uint256,uint256)": FunctionFragment;
    "setReserveTokenDistributionPercent(uint256,uint256)": FunctionFragment;
    "setResetTotalSupply(uint256)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "setWrappedReserveToken(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "wrappedReserveToken()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "initializeReserveCore",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeReserveDistributorCore",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "maxHistoricalTreasuryValue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rebaseCooldown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveTokenBackingDecayPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveTokenDistributionPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setOracle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setRebaseCooldown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveTokenBackingDecayPercent",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveTokenDistributionPercent",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setResetTotalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setWrappedReserveToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wrappedReserveToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "initializeReserveCore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeReserveDistributorCore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxHistoricalTreasuryValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rebaseCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveTokenBackingDecayPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveTokenDistributionPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRebaseCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveTokenBackingDecayPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveTokenDistributionPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setResetTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWrappedReserveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wrappedReserveToken",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TreasurerDistributorCore extends BaseContract {
  contractName: "TreasurerDistributorCore";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TreasurerDistributorCoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    initializeReserveCore(
      oracle_: string,
      treasury_: string,
      reserveToken_: string,
      wrappedReserveToken_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeReserveDistributorCore(
      rebaseCooldown_: BigNumberish,
      resetTotalSupply_: BigNumberish,
      reserveTokenDistributionPercentNumerator_: BigNumberish,
      reserveTokenDistributionPercentDenominator_: BigNumberish,
      reserveTokenBackingDecayPercentNumerator_: BigNumberish,
      reserveTokenBackingDecayPercentDenominator_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxHistoricalTreasuryValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    rebaseCooldown(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserveToken(overrides?: CallOverrides): Promise<[string]>;

    reserveTokenBackingDecayPercent(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    reserveTokenDistributionPercent(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    resetTotalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    setOracle(
      oracle_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRebaseCooldown(
      rebaseCooldown_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReserveToken(
      reserveToken_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReserveTokenBackingDecayPercent(
      reserveTokenBackingDecayPercentNumerator_: BigNumberish,
      reserveTokenBackingDecayPercentDenominator_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReserveTokenDistributionPercent(
      reserveTokenDistributionPercentNumerator_: BigNumberish,
      reserveTokenDistributionPercentDenominator_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setResetTotalSupply(
      resetTotalSupply_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      treasury_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWrappedReserveToken(
      wrappedReserveToken_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    wrappedReserveToken(overrides?: CallOverrides): Promise<[string]>;
  };

  initializeReserveCore(
    oracle_: string,
    treasury_: string,
    reserveToken_: string,
    wrappedReserveToken_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeReserveDistributorCore(
    rebaseCooldown_: BigNumberish,
    resetTotalSupply_: BigNumberish,
    reserveTokenDistributionPercentNumerator_: BigNumberish,
    reserveTokenDistributionPercentDenominator_: BigNumberish,
    reserveTokenBackingDecayPercentNumerator_: BigNumberish,
    reserveTokenBackingDecayPercentDenominator_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxHistoricalTreasuryValue(overrides?: CallOverrides): Promise<BigNumber>;

  oracle(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  rebaseCooldown(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserveToken(overrides?: CallOverrides): Promise<string>;

  reserveTokenBackingDecayPercent(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  reserveTokenDistributionPercent(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  resetTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  setOracle(
    oracle_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRebaseCooldown(
    rebaseCooldown_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReserveToken(
    reserveToken_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReserveTokenBackingDecayPercent(
    reserveTokenBackingDecayPercentNumerator_: BigNumberish,
    reserveTokenBackingDecayPercentDenominator_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReserveTokenDistributionPercent(
    reserveTokenDistributionPercentNumerator_: BigNumberish,
    reserveTokenDistributionPercentDenominator_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setResetTotalSupply(
    resetTotalSupply_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    treasury_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWrappedReserveToken(
    wrappedReserveToken_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  wrappedReserveToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    initializeReserveCore(
      oracle_: string,
      treasury_: string,
      reserveToken_: string,
      wrappedReserveToken_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeReserveDistributorCore(
      rebaseCooldown_: BigNumberish,
      resetTotalSupply_: BigNumberish,
      reserveTokenDistributionPercentNumerator_: BigNumberish,
      reserveTokenDistributionPercentDenominator_: BigNumberish,
      reserveTokenBackingDecayPercentNumerator_: BigNumberish,
      reserveTokenBackingDecayPercentDenominator_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    maxHistoricalTreasuryValue(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    rebaseCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reserveToken(overrides?: CallOverrides): Promise<string>;

    reserveTokenBackingDecayPercent(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    reserveTokenDistributionPercent(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    resetTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    setOracle(oracle_: string, overrides?: CallOverrides): Promise<void>;

    setRebaseCooldown(
      rebaseCooldown_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReserveToken(
      reserveToken_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setReserveTokenBackingDecayPercent(
      reserveTokenBackingDecayPercentNumerator_: BigNumberish,
      reserveTokenBackingDecayPercentDenominator_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReserveTokenDistributionPercent(
      reserveTokenDistributionPercentNumerator_: BigNumberish,
      reserveTokenDistributionPercentDenominator_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setResetTotalSupply(
      resetTotalSupply_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(treasury_: string, overrides?: CallOverrides): Promise<void>;

    setWrappedReserveToken(
      wrappedReserveToken_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    wrappedReserveToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    initializeReserveCore(
      oracle_: string,
      treasury_: string,
      reserveToken_: string,
      wrappedReserveToken_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeReserveDistributorCore(
      rebaseCooldown_: BigNumberish,
      resetTotalSupply_: BigNumberish,
      reserveTokenDistributionPercentNumerator_: BigNumberish,
      reserveTokenDistributionPercentDenominator_: BigNumberish,
      reserveTokenBackingDecayPercentNumerator_: BigNumberish,
      reserveTokenBackingDecayPercentDenominator_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxHistoricalTreasuryValue(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rebaseCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserveToken(overrides?: CallOverrides): Promise<BigNumber>;

    reserveTokenBackingDecayPercent(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserveTokenDistributionPercent(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resetTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    setOracle(
      oracle_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRebaseCooldown(
      rebaseCooldown_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReserveToken(
      reserveToken_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReserveTokenBackingDecayPercent(
      reserveTokenBackingDecayPercentNumerator_: BigNumberish,
      reserveTokenBackingDecayPercentDenominator_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReserveTokenDistributionPercent(
      reserveTokenDistributionPercentNumerator_: BigNumberish,
      reserveTokenDistributionPercentDenominator_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setResetTotalSupply(
      resetTotalSupply_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasury(
      treasury_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWrappedReserveToken(
      wrappedReserveToken_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    wrappedReserveToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    initializeReserveCore(
      oracle_: string,
      treasury_: string,
      reserveToken_: string,
      wrappedReserveToken_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeReserveDistributorCore(
      rebaseCooldown_: BigNumberish,
      resetTotalSupply_: BigNumberish,
      reserveTokenDistributionPercentNumerator_: BigNumberish,
      reserveTokenDistributionPercentDenominator_: BigNumberish,
      reserveTokenBackingDecayPercentNumerator_: BigNumberish,
      reserveTokenBackingDecayPercentDenominator_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxHistoricalTreasuryValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebaseCooldown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserveToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserveTokenBackingDecayPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserveTokenDistributionPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resetTotalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setOracle(
      oracle_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRebaseCooldown(
      rebaseCooldown_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReserveToken(
      reserveToken_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReserveTokenBackingDecayPercent(
      reserveTokenBackingDecayPercentNumerator_: BigNumberish,
      reserveTokenBackingDecayPercentDenominator_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReserveTokenDistributionPercent(
      reserveTokenDistributionPercentNumerator_: BigNumberish,
      reserveTokenDistributionPercentDenominator_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setResetTotalSupply(
      resetTotalSupply_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      treasury_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWrappedReserveToken(
      wrappedReserveToken_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wrappedReserveToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
