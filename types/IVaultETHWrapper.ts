/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IVaultETHWrapperInterface extends utils.Interface {
    functions: {
        "WETH()": FunctionFragment;
        "deposit(address,uint256[])": FunctionFragment;
        "redeem(address,uint256)": FunctionFragment;
    };

    getFunction(nameOrSignatureOrTopic: "WETH" | "deposit" | "redeem"): FunctionFragment;

    encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
    encodeFunctionData(functionFragment: "deposit", values: [string, BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "redeem", values: [string, BigNumberish]): string;

    decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;

    events: {};
}

export interface IVaultETHWrapper extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: IVaultETHWrapperInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        WETH(overrides?: CallOverrides): Promise<[string] & { weth: string }>;

        deposit(vault: string, amount: BigNumberish[], overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        redeem(vault: string, shares: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;
    };

    WETH(overrides?: CallOverrides): Promise<string>;

    deposit(vault: string, amount: BigNumberish[], overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    redeem(vault: string, shares: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    callStatic: {
        WETH(overrides?: CallOverrides): Promise<string>;

        deposit(vault: string, amount: BigNumberish[], overrides?: CallOverrides): Promise<BigNumber>;

        redeem(vault: string, shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber[]>;
    };

    filters: {};

    estimateGas: {
        WETH(overrides?: CallOverrides): Promise<BigNumber>;

        deposit(vault: string, amount: BigNumberish[], overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        redeem(vault: string, shares: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
    };

    populateTransaction: {
        WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        deposit(vault: string, amount: BigNumberish[], overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        redeem(vault: string, shares: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;
    };
}
