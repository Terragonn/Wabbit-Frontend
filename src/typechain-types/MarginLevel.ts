/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MarginLevelInterface extends utils.Interface {
  contractName: "MarginLevel";
  functions: {
    "borrowed(address,address)": FunctionFragment;
    "borrowedPrice(address)": FunctionFragment;
    "collateral(address,address)": FunctionFragment;
    "collateralPrice(address)": FunctionFragment;
    "initialBorrowBlock(address,address)": FunctionFragment;
    "initialBorrowPrice(address,address)": FunctionFragment;
    "interest(address)": FunctionFragment;
    "isBorrowing(address,address)": FunctionFragment;
    "liquidatable(address)": FunctionFragment;
    "marginLevel(address)": FunctionFragment;
    "minMarginLevel()": FunctionFragment;
    "oracle()": FunctionFragment;
    "owner()": FunctionFragment;
    "pool()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setMinMarginLevel(uint256,uint256)": FunctionFragment;
    "setOracle(address)": FunctionFragment;
    "setPool(address)": FunctionFragment;
    "totalBorrowed(address)": FunctionFragment;
    "totalCollateral(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "borrowed",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowedPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "collateral",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialBorrowBlock",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialBorrowPrice",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "interest", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isBorrowing",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatable",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "marginLevel", values: [string]): string;
  encodeFunctionData(
    functionFragment: "minMarginLevel",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMinMarginLevel",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOracle", values: [string]): string;
  encodeFunctionData(functionFragment: "setPool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalBorrowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCollateral",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "borrowed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collateral", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialBorrowBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialBorrowPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "interest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isBorrowing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidatable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marginLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minMarginLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinMarginLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface MarginLevel extends BaseContract {
  contractName: "MarginLevel";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarginLevelInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    borrowed(
      borrowed_: string,
      account_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    borrowedPrice(
      account_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collateral(
      collateral_: string,
      account_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collateralPrice(
      account_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialBorrowBlock(
      borrowed_: string,
      account_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "initialBorrowPrice(address,address)"(
      borrowed_: string,
      account_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "initialBorrowPrice(address)"(
      account_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "interest(address)"(
      account_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "interest(address,address)"(
      borrowed_: string,
      account_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "isBorrowing(address,address)"(
      borrowed_: string,
      account_: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isBorrowing(address)"(
      account_: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liquidatable(
      account_: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    marginLevel(
      account_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    minMarginLevel(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pool(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinMarginLevel(
      minMarginLevelNumerator_: BigNumberish,
      minMarginLevelDenominator_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracle(
      oracle_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPool(
      pool_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalBorrowed(
      borrowed_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalCollateral(
      collateral_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  borrowed(
    borrowed_: string,
    account_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  borrowedPrice(
    account_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collateral(
    collateral_: string,
    account_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collateralPrice(
    account_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialBorrowBlock(
    borrowed_: string,
    account_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "initialBorrowPrice(address,address)"(
    borrowed_: string,
    account_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "initialBorrowPrice(address)"(
    account_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "interest(address)"(
    account_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "interest(address,address)"(
    borrowed_: string,
    account_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "isBorrowing(address,address)"(
    borrowed_: string,
    account_: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isBorrowing(address)"(
    account_: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liquidatable(account_: string, overrides?: CallOverrides): Promise<boolean>;

  marginLevel(
    account_: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  minMarginLevel(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  oracle(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pool(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinMarginLevel(
    minMarginLevelNumerator_: BigNumberish,
    minMarginLevelDenominator_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracle(
    oracle_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPool(
    pool_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalBorrowed(
    borrowed_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalCollateral(
    collateral_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    borrowed(
      borrowed_: string,
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowedPrice(
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateral(
      collateral_: string,
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralPrice(
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialBorrowBlock(
      borrowed_: string,
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "initialBorrowPrice(address,address)"(
      borrowed_: string,
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "initialBorrowPrice(address)"(
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "interest(address)"(
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "interest(address,address)"(
      borrowed_: string,
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isBorrowing(address,address)"(
      borrowed_: string,
      account_: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isBorrowing(address)"(
      account_: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidatable(account_: string, overrides?: CallOverrides): Promise<boolean>;

    marginLevel(
      account_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    minMarginLevel(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    oracle(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pool(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setMinMarginLevel(
      minMarginLevelNumerator_: BigNumberish,
      minMarginLevelDenominator_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracle(oracle_: string, overrides?: CallOverrides): Promise<void>;

    setPool(pool_: string, overrides?: CallOverrides): Promise<void>;

    totalBorrowed(
      borrowed_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalCollateral(
      collateral_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    borrowed(
      borrowed_: string,
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowedPrice(
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateral(
      collateral_: string,
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralPrice(
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialBorrowBlock(
      borrowed_: string,
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "initialBorrowPrice(address,address)"(
      borrowed_: string,
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "initialBorrowPrice(address)"(
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "interest(address)"(
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "interest(address,address)"(
      borrowed_: string,
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isBorrowing(address,address)"(
      borrowed_: string,
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isBorrowing(address)"(
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidatable(
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marginLevel(
      account_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minMarginLevel(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinMarginLevel(
      minMarginLevelNumerator_: BigNumberish,
      minMarginLevelDenominator_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracle(
      oracle_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPool(
      pool_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalBorrowed(
      borrowed_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalCollateral(
      collateral_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    borrowed(
      borrowed_: string,
      account_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowedPrice(
      account_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateral(
      collateral_: string,
      account_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralPrice(
      account_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialBorrowBlock(
      borrowed_: string,
      account_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "initialBorrowPrice(address,address)"(
      borrowed_: string,
      account_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "initialBorrowPrice(address)"(
      account_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "interest(address)"(
      account_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "interest(address,address)"(
      borrowed_: string,
      account_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isBorrowing(address,address)"(
      borrowed_: string,
      account_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isBorrowing(address)"(
      account_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidatable(
      account_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marginLevel(
      account_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minMarginLevel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinMarginLevel(
      minMarginLevelNumerator_: BigNumberish,
      minMarginLevelDenominator_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracle(
      oracle_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPool(
      pool_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalBorrowed(
      borrowed_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalCollateral(
      collateral_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
