/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Converter, ConverterInterface } from "../Converter";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract UniswapV2Router02",
        name: "router_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenIn_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn_",
        type: "uint256",
      },
      {
        internalType: "contract IERC20",
        name: "tokenOut_",
        type: "address",
      },
    ],
    name: "maxAmountOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenIn_",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "tokenOut_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountOut_",
        type: "uint256",
      },
    ],
    name: "minAmountIn",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "router",
    outputs: [
      {
        internalType: "contract UniswapV2Router02",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract UniswapV2Router02",
        name: "router_",
        type: "address",
      },
    ],
    name: "setRouter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "tokenIn_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn_",
        type: "uint256",
      },
      {
        internalType: "contract IERC20",
        name: "tokenOut_",
        type: "address",
      },
    ],
    name: "swapMaxOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610eb8380380610eb883398101604081905261002f916100ad565b6100383361005d565b600180546001600160a01b0319166001600160a01b03929092169190911790556100db565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100be578081fd5b81516001600160a01b03811681146100d4578182fd5b9392505050565b610dce806100ea6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063c0d786551161005b578063c0d78655146100f5578063d6e3777714610108578063f2fde38b1461011b578063f887ea401461012e57600080fd5b806305c0d09a1461008d578063715018a6146100b35780638da5cb5b146100bd578063959de0bc146100e2575b600080fd5b6100a061009b366004610ba8565b610141565b6040519081526020015b60405180910390f35b6100bb6102d8565b005b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100aa565b6100a06100f0366004610ba8565b610317565b6100bb610103366004610a6c565b610410565b6100a0610116366004610b68565b61045c565b6100bb610129366004610a6c565b61059d565b6001546100ca906001600160a01b031681565b60408051600280825260608201835260009283929190602083019080368337019050509050848160008151811061018857634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505082816001815181106101ca57634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526101ee908616333087610638565b600154610208906001600160a01b038781169116866106a9565b6001546000906001600160a01b03166338ed17398683853361022b426001610d1d565b6040518663ffffffff1660e01b815260040161024b959493929190610ce1565b600060405180830381600087803b15801561026557600080fd5b505af1158015610279573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102a19190810190610a88565b6001815181106102c157634e487b7160e01b600052603260045260246000fd5b6020026020010151905080925050505b9392505050565b6000546001600160a01b0316331461030b5760405162461bcd60e51b815260040161030290610c93565b60405180910390fd5b61031560006107d2565b565b60408051600280825260608201835260009283929190602083019080368337019050509050848160008151811061035e57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505082816001815181106103a057634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260015460405163d06ca61f60e01b8152600092919091169063d06ca61f906103e49088908690600401610cc8565b60006040518083038186803b1580156103fc57600080fd5b505afa158015610279573d6000803e3d6000fd5b6000546001600160a01b0316331461043a5760405162461bcd60e51b815260040161030290610c93565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6040805160028082526060820183526000928392919060208301908036833701905050905084816000815181106104a357634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505083816001815181106104e557634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526001546040516307c0329d60e21b81526000929190911690631f00ca74906105299087908690600401610cc8565b60006040518083038186803b15801561054157600080fd5b505afa158015610555573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261057d9190810190610a88565b6000815181106102c157634e487b7160e01b600052603260045260246000fd5b6000546001600160a01b031633146105c75760405162461bcd60e51b815260040161030290610c93565b6001600160a01b03811661062c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610302565b610635816107d2565b50565b6040516001600160a01b03808516602483015283166044820152606481018290526106a39085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610822565b50505050565b8015806107325750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156106f857600080fd5b505afa15801561070c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107309190610be9565b155b61079d5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610302565b6040516001600160a01b0383166024820152604481018290526107cd90849063095ea7b360e01b9060640161066c565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610877826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108f49092919063ffffffff16565b8051909150156107cd57808060200190518101906108959190610b48565b6107cd5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610302565b6060610903848460008561090b565b949350505050565b60608247101561096c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610302565b843b6109ba5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610302565b600080866001600160a01b031685876040516109d69190610c44565b60006040518083038185875af1925050503d8060008114610a13576040519150601f19603f3d011682016040523d82523d6000602084013e610a18565b606091505b5091509150610a28828286610a33565b979650505050505050565b60608315610a425750816102d1565b825115610a525782518084602001fd5b8160405162461bcd60e51b81526004016103029190610c60565b600060208284031215610a7d578081fd5b81356102d181610d83565b60006020808385031215610a9a578182fd5b825167ffffffffffffffff80821115610ab1578384fd5b818501915085601f830112610ac4578384fd5b815181811115610ad657610ad6610d6d565b8060051b604051601f19603f83011681018181108582111715610afb57610afb610d6d565b604052828152858101935084860182860187018a1015610b19578788fd5b8795505b83861015610b3b578051855260019590950194938601938601610b1d565b5098975050505050505050565b600060208284031215610b59578081fd5b815180151581146102d1578182fd5b600080600060608486031215610b7c578182fd5b8335610b8781610d83565b92506020840135610b9781610d83565b929592945050506040919091013590565b600080600060608486031215610bbc578283fd5b8335610bc781610d83565b9250602084013591506040840135610bde81610d83565b809150509250925092565b600060208284031215610bfa578081fd5b5051919050565b6000815180845260208085019450808401835b83811015610c395781516001600160a01b031687529582019590820190600101610c14565b509495945050505050565b60008251610c56818460208701610d41565b9190910192915050565b6020815260008251806020840152610c7f816040850160208701610d41565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b8281526040602082015260006109036040830184610c01565b85815284602082015260a060408201526000610d0060a0830186610c01565b6001600160a01b0394909416606083015250608001529392505050565b60008219821115610d3c57634e487b7160e01b81526011600452602481fd5b500190565b60005b83811015610d5c578181015183820152602001610d44565b838111156106a35750506000910152565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461063557600080fdfea2646970667358221220f1fa99ccc74f68211d6f563e59dd3d72267f414fd10d930a24fe910007d34c0a64736f6c63430008040033";

type ConverterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConverterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Converter__factory extends ContractFactory {
  constructor(...args: ConverterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Converter";
  }

  deploy(
    router_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Converter> {
    return super.deploy(router_, overrides || {}) as Promise<Converter>;
  }
  getDeployTransaction(
    router_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(router_, overrides || {});
  }
  attach(address: string): Converter {
    return super.attach(address) as Converter;
  }
  connect(signer: Signer): Converter__factory {
    return super.connect(signer) as Converter__factory;
  }
  static readonly contractName: "Converter";
  public readonly contractName: "Converter";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConverterInterface {
    return new utils.Interface(_abi) as ConverterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Converter {
    return new Contract(address, _abi, signerOrProvider) as Converter;
  }
}
