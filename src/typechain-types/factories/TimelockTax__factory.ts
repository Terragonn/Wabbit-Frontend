/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TimelockTax, TimelockTaxInterface } from "../TimelockTax";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "taxPercentageNumerator_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "taxPercentageDenominator_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "taxCooldown_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token_",
        type: "address",
      },
    ],
    name: "claimTax",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lastTax",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account_",
        type: "address",
      },
    ],
    name: "setTaxAccount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "taxAccount",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token_",
        type: "address",
      },
    ],
    name: "taxClaimAvailable",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "taxCooldown",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "taxPercentage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161081038038061081083398101604081905261002f91610052565b600080546001600160a01b03191633179055600192909255600255608052610080565b60008060006060848603121561006757600080fd5b8351925060208401519150604084015190509250925092565b60805161076e6100a26000396000818161010f0152610232015261076e6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063aa0b28ff1161005b578063aa0b28ff146100dc578063ae7b6d16146100ef578063c9d15a021461010a578063d0385b5e1461013157600080fd5b80636184c1641461008257806372ed01ec146100b25780639c2394f8146100c9575b600080fd5b600054610095906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100bb60035481565b6040519081526020016100a9565b6100bb6100d7366004610597565b610146565b6100bb6100ea366004610597565b6101ec565b600154600254604080519283526020830191909152016100a9565b6100bb7f000000000000000000000000000000000000000000000000000000000000000081565b61014461013f366004610597565b6102e3565b005b6040516370a0823160e01b815230600482015260009081906001600160a01b038416906370a082319060240160206040518083038186803b15801561018a57600080fd5b505afa15801561019e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c291906105c0565b6002546001549192506000916101e491906101de908590610338565b9061034b565b949350505050565b600080546001600160a01b0316336001600160a01b0316146102295760405162461bcd60e51b8152600401610220906105d9565b60405180910390fd5b600354610256907f0000000000000000000000000000000000000000000000000000000000000000610357565b4210156102b15760405162461bcd60e51b815260206004820152602360248201527f54696d656c6f636b5461783a20546f6f206561726c7920746f20636c61696d206044820152620e8c2f60eb1b6064820152608401610220565b60006102bc83610146565b6000549091506102d9906001600160a01b03858116911683610363565b4260035592915050565b6000546001600160a01b0316336001600160a01b0316146103165760405162461bcd60e51b8152600401610220906105d9565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000610344828461063e565b9392505050565b6000610344828461065d565b6000610344828461067f565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526103b59084906103ba565b505050565b600061040f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661048c9092919063ffffffff16565b8051909150156103b5578080602001905181019061042d9190610697565b6103b55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610220565b60606101e4848460008585843b6104e55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610220565b600080866001600160a01b0316858760405161050191906106e9565b60006040518083038185875af1925050503d806000811461053e576040519150601f19603f3d011682016040523d82523d6000602084013e610543565b606091505b509150915061055382828661055e565b979650505050505050565b6060831561056d575081610344565b82511561057d5782518084602001fd5b8160405162461bcd60e51b81526004016102209190610705565b6000602082840312156105a957600080fd5b81356001600160a01b038116811461034457600080fd5b6000602082840312156105d257600080fd5b5051919050565b6020808252602f908201527f54696d656c6f636b5461783a204f6e6c792074686520746178206163636f756e60408201526e74206d61792063616c6c207468697360881b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561065857610658610628565b500290565b60008261067a57634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561069257610692610628565b500190565b6000602082840312156106a957600080fd5b8151801515811461034457600080fd5b60005b838110156106d45781810151838201526020016106bc565b838111156106e3576000848401525b50505050565b600082516106fb8184602087016106b9565b9190910192915050565b60208152600082518060208401526107248160408501602087016106b9565b601f01601f1916919091016040019291505056fea2646970667358221220286155810760a9f9683a11c65133b897a3d14f11ab838b62ba266058c608c7e764736f6c63430008090033";

type TimelockTaxConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TimelockTaxConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TimelockTax__factory extends ContractFactory {
  constructor(...args: TimelockTaxConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "TimelockTax";
  }

  deploy(
    taxPercentageNumerator_: BigNumberish,
    taxPercentageDenominator_: BigNumberish,
    taxCooldown_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TimelockTax> {
    return super.deploy(
      taxPercentageNumerator_,
      taxPercentageDenominator_,
      taxCooldown_,
      overrides || {}
    ) as Promise<TimelockTax>;
  }
  getDeployTransaction(
    taxPercentageNumerator_: BigNumberish,
    taxPercentageDenominator_: BigNumberish,
    taxCooldown_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      taxPercentageNumerator_,
      taxPercentageDenominator_,
      taxCooldown_,
      overrides || {}
    );
  }
  attach(address: string): TimelockTax {
    return super.attach(address) as TimelockTax;
  }
  connect(signer: Signer): TimelockTax__factory {
    return super.connect(signer) as TimelockTax__factory;
  }
  static readonly contractName: "TimelockTax";
  public readonly contractName: "TimelockTax";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TimelockTaxInterface {
    return new utils.Interface(_abi) as TimelockTaxInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TimelockTax {
    return new Contract(address, _abi, signerOrProvider) as TimelockTax;
  }
}
