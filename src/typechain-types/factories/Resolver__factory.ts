/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Resolver, ResolverInterface } from "../Resolver";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "pokeMe_",
        type: "address",
      },
      {
        internalType: "contract MarginLong",
        name: "marginLong_",
        type: "address",
      },
      {
        internalType: "contract LPool",
        name: "pool_",
        type: "address",
      },
      {
        internalType: "contract IConverter",
        name: "converter_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ETH",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "checker",
    outputs: [
      {
        internalType: "bool",
        name: "canExec",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "execPayload",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "converter",
    outputs: [
      {
        internalType: "contract IConverter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account_",
        type: "address",
      },
    ],
    name: "executorLiquidate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account_",
        type: "address",
      },
    ],
    name: "executorReset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gelato",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "marginLong",
    outputs: [
      {
        internalType: "contract MarginLong",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pokeMe",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pool",
    outputs: [
      {
        internalType: "contract LPool",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60c06040523480156200001157600080fd5b50604051620016fe380380620016fe833981016040819052620000349162000128565b83806001600160a01b03166080816001600160a01b031681525050806001600160a01b031663573ea5756040518163ffffffff1660e01b815260040160206040518083038186803b1580156200008957600080fd5b505afa1580156200009e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000c4919062000190565b6001600160a01b0390811660a052600080546001600160a01b0319908116968316969096179055600180548616948216949094179093555060028054909316911617905550620001b7565b6001600160a01b03811681146200012557600080fd5b50565b600080600080608085870312156200013f57600080fd5b84516200014c816200010f565b60208601519094506200015f816200010f565b604086015190935062000172816200010f565b606086015190925062000185816200010f565b939692955090935050565b600060208284031215620001a357600080fd5b8151620001b0816200010f565b9392505050565b60805160a0516114ff620001ff6000396000818160e201528181610d930152610e5801526000818161015d015281816101a0015281816102af01526105c701526114ff6000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806386f041ba1161006657806386f041ba1461011f578063bd38837b14610132578063c570041114610145578063c84eee0d14610158578063cf5303cf1461017f57600080fd5b806316f0115b146100985780633d74d7b3146100c8578063573ea575146100dd5780638322fff214610104575b600080fd5b6001546100ab906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100db6100d6366004611113565b610195565b005b6100ab7f000000000000000000000000000000000000000000000000000000000000000081565b6100ab73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6000546100ab906001600160a01b031681565b6002546100ab906001600160a01b031681565b6100db610153366004611113565b6102a4565b6100ab7f000000000000000000000000000000000000000000000000000000000000000081565b610187610349565b6040516100bf92919061118c565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461020c5760405162461bcd60e51b8152602060048201526017602482015276506f6b654d6552656164793a206f6e6c79506f6b654d6560481b60448201526064015b60405180910390fd5b600080546040516365189a7b60e11b81526001600160a01b0384811660048301528392169063ca3134f6906024015b600060405180830381600087803b15801561025557600080fd5b505af1158015610269573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610291919081019061127d565b9150915061029f82826105c2565b505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103165760405162461bcd60e51b8152602060048201526017602482015276506f6b654d6552656164793a206f6e6c79506f6b654d6560481b6044820152606401610203565b60008054604051638ac5d4a360e01b81526001600160a01b03848116600483015283921690638ac5d4a39060240161023b565b6000606060008060009054906101000a90046001600160a01b03166001600160a01b0316636847e50b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561039c57600080fd5b505afa1580156103b0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103d89190810190611342565b905060005b81518110156105a65760008282815181106103fa576103fa6113d1565b6020908102919091010151600054604051600162138f5160e01b031981526001600160a01b03808416600483015292935091169063ffec70af9060240160206040518083038186803b15801561044f57600080fd5b505afa158015610463573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048791906113e7565b156104ea576040516001600160a01b03821660248201526001955063c570041160e01b906044015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915294959350505050565b600054604051630b6eab3760e21b81526001600160a01b03838116600483015290911690632dbaacdc9060240160206040518083038186803b15801561052f57600080fd5b505afa158015610543573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056791906113e7565b15610593576040516001600160a01b038216602482015260019550633d74d7b360e01b906044016104af565b508061059e8161141f565b9150506103dd565b5060006040518060200160405280600081525092509250509091565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b810c6366040518163ffffffff1660e01b8152600401604080518083038186803b15801561061d57600080fd5b505afa158015610631573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610655919061143a565b9150915060005b8451811015610ac05760025485516000916001600160a01b03169063959de0bc9088908590811061068f5761068f6113d1565b60200260200101518785815181106106a9576106a96113d1565b60209081029190910101516040516001600160e01b031960e085901b1681526001600160a01b0392831660048201526024810191909152908616604482015260640160206040518083038186803b15801561070357600080fd5b505afa158015610717573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073b919061146a565b9050838111156109765760025486516000916001600160a01b03169063d6e377779089908690811061076f5761076f6113d1565b60200260200101518689878151811061078a5761078a6113d1565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b039384166004820152929091166024830152604482015260640160206040518083038186803b1580156107e257600080fd5b505afa1580156107f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081a919061146a565b9050610868600260009054906101000a90046001600160a01b031682898681518110610848576108486113d1565b60200260200101516001600160a01b0316610c009092919063ffffffff16565b60025487516001600160a01b03909116906305c0d09a90899086908110610891576108916113d1565b60209081029190910101516040516001600160e01b031960e084901b1681526001600160a01b039182166004820152602481018590529087166044820152606401602060405180830381600087803b1580156108ec57600080fd5b505af1158015610900573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610924919061146a565b506109518187858151811061093b5761093b6113d1565b6020026020010151610d5790919063ffffffff16565b868481518110610963576109636113d1565b6020026020010181815250505050610ac0565b60025485516109b5916001600160a01b03169087908590811061099b5761099b6113d1565b6020026020010151888581518110610848576108486113d1565b60025486516001600160a01b03909116906305c0d09a908890859081106109de576109de6113d1565b60200260200101518785815181106109f8576109f86113d1565b60209081029190910101516040516001600160e01b031960e085901b1681526001600160a01b03928316600482015260248101919091529086166044820152606401602060405180830381600087803b158015610a5457600080fd5b505af1158015610a68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8c919061146a565b506000858381518110610aa157610aa16113d1565b6020026020010181815250505080610ab88161141f565b91505061065c565b50610acb8282610d6a565b60005b8451811015610bf9576000848281518110610aeb57610aeb6113d1565b60200260200101511115610be7576001548451610b38916001600160a01b031690869084908110610b1e57610b1e6113d1565b6020026020010151878481518110610848576108486113d1565b60015485516001600160a01b03909116906347e7ef2490879084908110610b6157610b616113d1565b6020026020010151868481518110610b7b57610b7b6113d1565b60200260200101516040518363ffffffff1660e01b8152600401610bb49291906001600160a01b03929092168252602082015260400190565b600060405180830381600087803b158015610bce57600080fd5b505af1158015610be2573d6000803e3d6000fd5b505050505b80610bf18161141f565b915050610ace565b5050505050565b801580610c895750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015610c4f57600080fd5b505afa158015610c63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c87919061146a565b155b610cf45760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610203565b6040516001600160a01b03831660248201526044810182905261029f90849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610e81565b6000610d638284611483565b9392505050565b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610e525760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168360405160006040518083038185875af1925050503d8060008114610dfc576040519150601f19603f3d011682016040523d82523d6000602084013e610e01565b606091505b505090508061029f5760405162461bcd60e51b815260206004820152601e60248201527f5f7472616e736665723a20455448207472616e73666572206661696c656400006044820152606401610203565b610e7d817f000000000000000000000000000000000000000000000000000000000000000084610f53565b5050565b6000610ed6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610f839092919063ffffffff16565b80519091501561029f5780806020019051810190610ef491906113e7565b61029f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610203565b6040516001600160a01b03831660248201526044810182905261029f90849063a9059cbb60e01b90606401610d20565b6060610f928484600085610f9a565b949350505050565b606082471015610ffb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610203565b843b6110495760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610203565b600080866001600160a01b03168587604051611065919061149a565b60006040518083038185875af1925050503d80600081146110a2576040519150601f19603f3d011682016040523d82523d6000602084013e6110a7565b606091505b50915091506110b78282866110c2565b979650505050505050565b606083156110d1575081610d63565b8251156110e15782518084602001fd5b8160405162461bcd60e51b815260040161020391906114b6565b6001600160a01b038116811461111057600080fd5b50565b60006020828403121561112557600080fd5b8135610d63816110fb565b60005b8381101561114b578181015183820152602001611133565b8381111561115a576000848401525b50505050565b60008151808452611178816020860160208601611130565b601f01601f19169290920160200192915050565b8215158152604060208201526000610f926040830184611160565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156111e6576111e66111a7565b604052919050565b600067ffffffffffffffff821115611208576112086111a7565b5060051b60200190565b600082601f83011261122357600080fd5b81516020611238611233836111ee565b6111bd565b82815260059290921b8401810191818101908684111561125757600080fd5b8286015b84811015611272578051835291830191830161125b565b509695505050505050565b6000806040838503121561129057600080fd5b825167ffffffffffffffff808211156112a857600080fd5b818501915085601f8301126112bc57600080fd5b815160206112cc611233836111ee565b82815260059290921b840181019181810190898411156112eb57600080fd5b948201945b83861015611312578551611303816110fb565b825294820194908201906112f0565b9188015191965090935050508082111561132b57600080fd5b5061133885828601611212565b9150509250929050565b6000602080838503121561135557600080fd5b825167ffffffffffffffff81111561136c57600080fd5b8301601f8101851361137d57600080fd5b805161138b611233826111ee565b81815260059190911b820183019083810190878311156113aa57600080fd5b928401925b828410156110b75783516113c2816110fb565b825292840192908401906113af565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156113f957600080fd5b81518015158114610d6357600080fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561143357611433611409565b5060010190565b6000806040838503121561144d57600080fd5b82519150602083015161145f816110fb565b809150509250929050565b60006020828403121561147c57600080fd5b5051919050565b60008282101561149557611495611409565b500390565b600082516114ac818460208701611130565b9190910192915050565b602081526000610d63602083018461116056fea2646970667358221220fe5305e71dd97110ce918bdd63725b28510d4891df51d4e891e937c648e00b9664736f6c63430008090033";

type ResolverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ResolverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Resolver__factory extends ContractFactory {
  constructor(...args: ResolverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Resolver";
  }

  deploy(
    pokeMe_: string,
    marginLong_: string,
    pool_: string,
    converter_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Resolver> {
    return super.deploy(
      pokeMe_,
      marginLong_,
      pool_,
      converter_,
      overrides || {}
    ) as Promise<Resolver>;
  }
  getDeployTransaction(
    pokeMe_: string,
    marginLong_: string,
    pool_: string,
    converter_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      pokeMe_,
      marginLong_,
      pool_,
      converter_,
      overrides || {}
    );
  }
  attach(address: string): Resolver {
    return super.attach(address) as Resolver;
  }
  connect(signer: Signer): Resolver__factory {
    return super.connect(signer) as Resolver__factory;
  }
  static readonly contractName: "Resolver";
  public readonly contractName: "Resolver";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ResolverInterface {
    return new utils.Interface(_abi) as ResolverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Resolver {
    return new Contract(address, _abi, signerOrProvider) as Resolver;
  }
}
